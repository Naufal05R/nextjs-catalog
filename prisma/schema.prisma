// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id             String          @id @default(cuid())
  title          String          @unique @db.VarChar(16)
  slug           String          @unique @db.VarChar(16)
  description    String          @db.VarChar(64)
  isFavorite     Boolean         @default(false)
  products       Product[]
  subcollections Subcollection[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Subcollection {
  id           String     @id @default(cuid())
  title        String     @unique @db.VarChar(32)
  slug         String     @unique @db.VarChar(32)
  description  String     @db.VarChar(64)
  products     Product[]
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  title       String    @unique @db.VarChar(16)
  slug        String    @unique @db.VarChar(16)
  description String    @db.VarChar(64)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String         @id @default(cuid())
  title           String         @unique @db.VarChar(64)
  slug            String         @unique @db.VarChar(64)
  state           String         @db.VarChar(64)
  width           Float          @db.Real
  height          Float          @db.Real
  length          Float          @db.Real
  weight          Float          @db.Real
  color           String         @db.VarChar(64)
  price           Int            @db.Integer
  discount        Float?         @db.Real
  description     String         @db.Text
  tags            Tag[]
  gallery         Gallery?
  isReady         Boolean        @default(true)
  isFavorite      Boolean        @default(false)
  collectionId    String
  collection      Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcollectionId String?
  subcollection   Subcollection? @relation(fields: [subcollectionId], references: [id], onDelete: SetNull)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Tag {
  id       String    @id @default(cuid())
  title    String    @unique @db.VarChar(64)
  slug     String    @unique @db.VarChar(64)
  products Product[]
}

model Gallery {
  id        String  @id @default(cuid())
  title     String  @unique @db.VarChar(16)
  slug      String  @unique @db.VarChar(16)
  medias    Media[]
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Media {
  id        String  @id @default(cuid())
  title     String  @unique @db.VarChar(128)
  slug      String  @unique @db.VarChar(128)
  name      String  @unique @db.VarChar(132)
  order     Int     @db.SmallInt
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
}

model News {
  id          String     @id @default(cuid())
  title       String     @unique @db.VarChar(64)
  slug        String     @unique @db.VarChar(64)
  description String     @db.VarChar(256)
  thumbnail   Thumbnail?
  isRelevant  Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Thumbnail {
  id     String @id @default(uuid())
  exts   String @db.VarChar(8)
  newsId String @unique
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
}
